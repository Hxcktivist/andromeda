from update_locales import *

addon_path = "Z:/_dev/FreeUI/"

# Scan all locale strings
files = get_files(addon_path, ignore=["git", "github", "vscode", "locales", "libs"])
keys = generate_keys(files)
keys.sort()

# Scan and save all translated locale strings
locale_files = get_exist_locale_list(addon_path + "locales")
exist_locales = {}
for lang_code, path in locale_files.items():
    exist_locales[lang_code] = get_exist_locales(path)

# Sort translations and update locale strings
new_locales = {}
for lang_code in exist_locales:
    new_locales[lang_code] = update_locales(keys, exist_locales[lang_code])

# Generate new locale files
for lang_code, path in locale_files.items():
    # copyfile(path, path.replace(".lua", ".bak"))
    file = open(path, "w", encoding='utf8')

    file.write('-- This file is automatically generated by the localization tool\n')
    file.write('-- https://github.com/fang2hou/WindToolsScripts/tree/master/MergeLocales\n\n')

    file.write('local F, C = unpack(select(2, ...))\n')
    file.write('local L = F.Libs.ACL:NewLocale("FreeUI", ')

    if lang_code == "enUS":
        file.write('"enUS", true, not C.IsDeveloper)\n')
    else:
        file.write('"{}")\n'.format(lang_code))

    file.write('if not L then return end\n\n')

    for key, value in new_locales[lang_code].items():
        if value != "":
            file.write('L["{}"] = "{}"\n'.format(key, value))
        else:
            file.write('L["{}"] = true\n'.format(key))

    file.close()
